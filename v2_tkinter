# -*- coding: utf-8 -*-
"""
Created on Fri Jan 13 09:57:49 2017

@author: Zazou
"""
from Tkinter import *
import pyaudio
import numpy as np
from functools import partial


SR = 44100 #Hz (Sampling Rate)
liste_notes = ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B']
liste_frequence = [262,277,294,311,330,349,370,392,415,440,466,494]
touches = ['d','r','f','t','g','h','u','j','i','k','o','l']

def sinus(f,t):
    """la fonction sinus renvoie une sinusoidale de frequence f et de durée t, 
    echantillonnée tous les 1/SR"""
    return np.sin(2*np.pi*f*np.arange((t*SR))/SR)

def note(f,t):
    """la fonctio note genere une note a partir de la fonction sinus.
    Cette note est composée d'harmonique superieure, dont les coefficient d'intensité
    sont données par a,b,c"""
    return (sinus(f,t) + 0.5* sinus(2*f,t) + 0.125*sinus(4*f,t))
    
class Interface(Frame):
    
    def __init__(self, fenetre, **kwargs):
        Frame.__init__(self, fenetre, width=768, height=576, **kwargs)
        self.pack(side='top')

        self.demarrage = Button(self, text = "Commencer", command = self.affichage)
        self.demarrage.pack()
                
        #bouton permettant de quitter le mainloop de l'interface (attention il ne ferme pas la fenetre)      
        quitter=Button(self, text="Quitter", command=self.quit)       
        quitter.pack(side ="bottom")
        
    def affichage(self):
        """La foncion affichage va recuperer les frequence associées a chaque note
        afin de creer les boutons de note, qui seront alors lié à la fonction "sortie"
        par clique ou appuie sur des touches claviers définies globalement"""        
        #On eneleve le texte "Commencer"
        self.demarrage.destroy()
        
        for i,j,k in zip(liste_notes,liste_frequence,range(12)):
            
            #Creation du bouton avec nom de la note
            self.i = Button(self,text = i)
            self.i.config(height=10, width=8)
            self.i.pack(side='left',fill = Y)
            #on lie l'appuie sur un bouton a l'aide de la souris à la fonction sortie
            self.i.bind("<Button-1>",lambda event,a=j:self.sortie(a))
            
            #lie l'appuie d'une touche de la liste 'touches' à la fonction sortie
            self.i.bind_all(touches[k],lambda event,a=j:self.sortie(a))
        
    def sortie(self,F):
        """Fonction sortie qui prend en entrée une fréquence F et qui fait appel 
        à la fonction "note" définie globalement pour jouer la note de fréquence donnée.
        Parametre T = durée de la note en seconde
        n = ?
        """
        T=1
        n=1
        son = note(F,T)
        volume = np.sin(2*np.pi*np.arange(n*T*SR)/(n*T*SR))
        son = son*volume        
        #jeu du son
        p = pyaudio.PyAudio()
        stream = p.open(format=pyaudio.paFloat32, channels=1, rate=44100, output=1)
        stream.write(son.astype(np.float32).tostring())
        stream.close()
        p.terminate()

class Coefficient(Frame):
    def __init__(self, fenetre, **kwargs):
        Frame.__init__(self, fenetre, width=768, height=576, **kwargs)
        self.pack(side='bottom')
        
        label = Label(self, text="coefficient d'intensité de la fondamental en %")
        label.pack(side='left')
        
        #creer une barre de defilement
        self.coeff_fonda = Scale(self, from_=0, to=100)
        self.coeff_fonda.set(100)
        self.coeff_fonda.pack(side='left')

        
        #creer un champ d'entree qui permet de donner une valeur a la barre
        #directement au clavier
        self.v = StringVar()
        self.valeur = Entry(self, width =4, textvariable=self.v)
        self.valeur.pack(side='left')
        self.valeur.bind('<Return>',self.callback)

        
        
    def callback(self,event):
        """permet de fixer la valeur de la barre directement en rentrant
        la valeur a la main grace à a l'entree precedente
        lecture de l'entree "valeur" et assignement a la barre"""
        self.coeff_fonda.set(self.valeur.get())
        
    

fenetre = Tk()
interface = Interface(fenetre)
coefficient = Coefficient(fenetre)
fenetre.title('Synthe python')
interface.mainloop()
interface.focus()
#permet de femrer la fenetre
fenetre.destroy()
